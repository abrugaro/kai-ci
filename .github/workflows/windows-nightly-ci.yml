name: Windows Nightly Run

on: [pull_request]

jobs:
  #start-ec2-instance:
    # uses: ./.github/workflows/provision-runner.yml
    # with:
    #   ec2-image-id: ami-01fa2492704e48175
    #   ec2-instance-type: t2.micro
    #   security-group-id: sg-0a3e6b53e86d0e69d
    #   subnet-id: subnet-06113672589e7e836
    #   ec2-os-type: windows
    # secrets:
    #   aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #   aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #   github-token: ${{ secrets.GH_RUNNER_API_TOKEN }}
    #   nonadmin-password: ${{ secrets.NONADMIN_PASSWORD }}

  run-tests:
    #needs: start-ec2-instance
    runs-on: 7zab5
    steps:

#      - name: Write Test Script
#        shell: powershell
#        run: |
#          # Ensure the directory exists
#          $runnerDir = "C:\Users\nonadmin\Documents\actions-runner\work"
#          if (-not (Test-Path -Path $runnerDir)) {
#            New-Item -Path $runnerDir -ItemType Directory -Force
#          }
#
#          # Create the test script
#          $scriptContent = @"
#          # Redirect output directly in the script
#          code --version >> "C:\Users\nonadmin\Documents\actions-runner\work\run-tests-output.log" 2>> "C:\Users\nonadmin\Documents\actions-runner\work\run-tests-error.log"
#          node --version >> "C:\Users\nonadmin\Documents\actions-runner\work\run-tests-output.log" 2>> "C:\Users\nonadmin\Documents\actions-runner\work\run-tests-error.log"
#          "@
#
#          $scriptPath = "$runnerDir\run-tests.ps1"
#          $scriptContent | Out-File -FilePath $scriptPath -Encoding utf8 -Force

      - name: Run Test Script with PsExec
        shell: powershell
        run: |
          # Define paths
          $psExecUrl = "https://download.sysinternals.com/files/PSTools.zip"
          $toolsDir = "C:\tools"
          $psExecPath = "$toolsDir\PsExec64.exe"
          $paExecPath = "$toolsDir\paexec.exe"
          $logDir = "C:\Users\nonadmin\Documents\actions-runner\work"
          $logPathOut = "$logDir\run-tests-output.log"
          $logPathErr = "$logDir\run-tests-error.log"
          
          # Step 1: Install PsExec
          Write-Output "Downloading and installing PsExec..."
          if (Test-Path -Path $toolsDir) { Remove-Item -Recurse -Force $toolsDir\PsExec64.exe }
          New-Item -Path $toolsDir -ItemType Directory -Force
          Invoke-WebRequest -Uri $psExecUrl -OutFile "$toolsDir\PSTools.zip"
          Expand-Archive -Path "$toolsDir\PSTools.zip" -DestinationPath $toolsDir -Force
          Write-Output "PsExec installed successfully."
          
      - name: Download PaExec
        run: |
          choco install wget -y --no-progress 
          Invoke-WebRequest -Uri "https://www.poweradmin.com/paexec/paexec.exe" -OutFile "C:\tools\paexec.exe"

          # wget -q https://www.poweradmin.com/paexec/paexec.exe -p $toolsDir  

      - name: Download NirCmd
        run: |
          $nircmdUrl = "https://www.nirsoft.net/utils/nircmd.zip"
          $nircmdZip = "$env:TEMP\nircmd.zip"
          $nircmdPath = "C:\tools\nircmd.exe"

          # Download and extract NirCmd
          Invoke-WebRequest -Uri $nircmdUrl -OutFile $nircmdZip
          Expand-Archive -Path $nircmdZip -DestinationPath C:\tools -Force
          Write-Output "NirCmd downloaded and extracted."

      - name: Execute command
        run: |
          $psExecPath = "C:\tools\PsExec64.exe"
          $paExecPath = "C:\tools\paexec.exe"
          $outputFile = "C:\Users\nonadmin\pwd_output.txt"
          $command = "powershell.exe -Command 'pwd | Out-File -FilePath \"$outputFile\"'"

          # $command = "hostname > 'C:\\Users\\nonadmin\\abcde.txt' 2>&1"
          # Write-Output "Executing command: & $psExecPath -accepteula -nobanner -u nonadmin -p 'pass123!' powershell.exe -Command '$command'"
          # & $psExecPath -accepteula -nobanner -u nonadmin -p 'pass123!' powershell.exe -Command "hostname"
          # & $psExecPath -accepteula -nobanner -u nonadmin -p 'pass123!' powershell.exe -Command "pwd"
          Start-Process $paExecPath -ArgumentList "-u nonadmin -p 'pass123!' $command"

          # Wait for the process to complete (optional)
          Start-Sleep -Seconds 5

          # Check if the output file exists
          if (Test-Path $outputFile) {
            Write-Output "Output file exists. Reading content..."

            # Read the content of the output file
            $outputContent = Get-Content -Path $outputFile
            Write-Output "Command output: $outputContent"
          } else {
            Write-Output "Output file not found. Check for errors."
            exit 1
          }


          # Capture screenshot after running the command using nircmd
          $screenshotPath = "C:\Users\nonadmin\screenshot.png"
          Write-Output "Capturing screenshot..."
          
          # Use nircmd to take a screenshot and save it
          & "C:\tools\nircmd.exe" cmdwait 1000 savescreenshot "$screenshotPath"


      # - name: Take Screenshot after hostname command
      #   if: always()  # Ensure this step runs even if the previous step fails
      #   run: |
      #     $screenshotPath = "C:\Users\nonadmin\screenshot.png"
      #     # Use NirCmd to take a screenshot after running the hostname command
      #     & "C:\tools\nircmd.exe" savescreenshot $screenshotPath
      #     Write-Output "Screenshot taken after hostname command and saved to: $screenshotPath"

        
      - name: Upload Screenshot as Artifact
        if: always()  # Ensure this step runs even if previous steps fail
        uses: actions/upload-artifact@v3
        with:
          name: screenshot
          path: C:\Users\nonadmin\screenshot.png
  
          
      # # Check if the log file exists remotely and print its content
      #     Write-Output "Reading the log file from the EC2 instance..."
      #     & $psExecPath -accepteula -nobanner -u nonadmin -p 'pass123!' powershell.exe -Command "Get-Content 'C:\Users\nonadmin\abcde.txt'"
      #     Write-Output "==========="
         
          
         


#  stop-ec2-instance:
#    needs: [ start-ec2-instance, run-tests ]
#    if: always()
#    uses: ./.github/workflows/remove-runner.yml
#    with:
#      ec2-instance-id: ${{ needs.start-ec2-instance.outputs.ec2-instance-id }}
#      ec2-runner-label: ${{ needs.start-ec2-instance.outputs.instance_label }}
#    secrets:
#      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#      github-token: ${{ secrets.GH_RUNNER_API_TOKEN }}


